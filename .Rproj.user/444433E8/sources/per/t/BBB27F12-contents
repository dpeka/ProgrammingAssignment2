## the two functions below are used in combination to calculate
## the inverse of a matrix and store it in cache.  A special vector is created
## to allow easy retrieval of the original matrix and its inverse.

## This function creates a special type of object
## which basically stores a matrix and it's inverse.
## you use the $get property to get the matrx
## you use the $getinverse to get the inverse of the matrix
## on it's own, this function wont work completely.  
## the cacheSolve function below ought to be used in combination.

makeCacheMatrix <- function(x = matrix()) {
      i_m <- NULL
      set <- function(y) {
            x <<- y
            i_m <<- NULL
      }
      get <- function() x
      setinverse <- function(solve) i_m <<- solve
      getinverse <- function() i_m
      list(set = set, get = get,
           setinverse = setinverse,
           getinverse = getinverse)
}


## This function accepts a special vector of the type created by the
## makeCacheMatrix function.  If the inverse of the matrix is not alreade chached
## it gets the original matrix, calculate the inverse with "solve" and then 
## stores the calculated amount by calling $setinverse of the special vector.

cacheSolve <- function(x, ...) {
        ## Return a matrix that is the inverse of 'x'
      i_m <- x$getinverse()
      if(!is.null(i_m)) {
            message("getting cached data")
            return(i_m)
      }
      data <- x$get()
      i_m <- solve(data, ...)
      x$setinverse(i_m)
      i_m
}
